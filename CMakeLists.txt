cmake_minimum_required(VERSION 3.22...3.25)

message(STATUS "CMAKE_CURRENT_SOURCE_DIR = ${CMAKE_CURRENT_SOURCE_DIR}")
message(STATUS "CMAKE_SOURCE_DIR = ${CMAKE_SOURCE_DIR}")
message(STATUS "CMAKE_BINARY_DIR = ${CMAKE_BINARY_DIR}")
message(STATUS "CMAKE_CURRENT_LIST_DIR = ${CMAKE_CURRENT_LIST_DIR}")
message(STATUS "CMAKE_SYSTEM_NAME = ${CMAKE_SYSTEM_NAME}")
message(STATUS "CMAKE_HOST_SYSTEM_NAME = ${CMAKE_HOST_SYSTEM_NAME}")
message(STATUS "CMAKE_MODULE_PATH = ${CMAKE_MODULE_PATH}")
message(STATUS "ARCHS = ${ARCHS}")
message(STATUS "CMAKE_SIZEOF_VOID_P = ${CMAKE_SIZEOF_VOID_P}")
message(STATUS "CMAKE_COMMAND = ${CMAKE_COMMAND}")
message(STATUS "EXECUTABLE = ${EXECUTABLE}")

if(CMAKE_HOST_SYSTEM_NAME MATCHES "ndo")
  message(STATUS "windows")
endif()

include("${CMAKE_CURRENT_SOURCE_DIR}/cmake/common/bootstrap.cmake" NO_POLICY_SCOPE)



message(STATUS "-----------After bootstrap----------")
message(STATUS "CMAKE_GENERATOR = ${CMAKE_GENERATOR}")
message(STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}")
message(STATUS "CMAKE_INCLUDE_CURRENT_DIR = ${CMAKE_INCLUDE_CURRENT_DIR}")
message(STATUS "_obs_default_version = ${_obs_default_version}")
message(STATUS "_obs_version = ${_obs_version}")
message(STATUS "_obs_version_canonical = ${_obs_version_canonical}")
message(STATUS "OBS_VERSION_OVERRIDE = ${OBS_VERSION_OVERRIDE}")
message(STATUS "_obs_version_result = ${_obs_version_result}")
message(STATUS "_obs_release_candidate = ${_obs_release_candidate}")
message(STATUS "OBS_VERSION_MAJOR = ${OBS_VERSION_MAJOR}")
message(STATUS "OBS_VERSION_MINOR = ${OBS_VERSION_MINOR}")
message(STATUS "OBS_VERSION_PATCH = ${OBS_VERSION_PATCH}")
message(STATUS "OBS_RELEASE_CANDIDATE = ${OBS_RELEASE_CANDIDATE}")
message(STATUS "_obs_beta = ${_obs_beta}")
message(STATUS "OBS_BETA = ${OBS_BETA}")
message(STATUS "OBS_VERSION_CANONICAL = ${OBS_VERSION_CANONICAL}")
message(STATUS "OBS_VERSION = ${OBS_VERSION}")
message(STATUS "OBS_BUILD_NUMBER = ${OBS_BUILD_NUMBER}")
message(STATUS "CMAKE_C_EXTENSIONS = ${CMAKE_C_EXTENSIONS}")
message(STATUS "CMAKE_CXX_EXTENSIONS = ${CMAKE_CXX_EXTENSIONS}")
message(STATUS "CMAKE_MODULE_PATH = ${CMAKE_MODULE_PATH}")
message(STATUS "OS_WINDOWS = ${OS_WINDOWS}")
message(STATUS "OS_MACOS = ${OS_MACOS}")
message(STATUS "EXECUTABLE = ${EXECUTABLE}")


include(compilerconfig)

message(STATUS "-----------After compilerconfig----------")
message(STATUS "ENABLE_CCACHE = ${ENABLE_CCACHE}")
message(STATUS "CCACHE_PROGRAM = ${CCACHE_PROGRAM}")
message(STATUS "CMAKE_C_COMPILER_ID = ${CMAKE_C_COMPILER_ID}")
message(STATUS "CMAKE_VS_GLOBALS = ${CMAKE_VS_GLOBALS}")
message(STATUS "CMAKE_MSVC_DEBUG_INFORMATION_FORMAT = ${CMAKE_MSVC_DEBUG_INFORMATION_FORMAT}")
message(STATUS "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM = ${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM}")
message(STATUS "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION = ${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION}")
message(STATUS "_obs_msvc_c_options = ${_obs_msvc_c_options}")
message(STATUS "_obs_msvc_cpp_options = ${_obs_msvc_cpp_options}")
message(STATUS "CMAKE_CXX_STANDARD = ${CMAKE_CXX_STANDARD}")
message(STATUS "CMAKE_COMPILE_WARNING_AS_ERROR = ${CMAKE_COMPILE_WARNING_AS_ERROR}")
message(STATUS "CMAKE_C_STANDARD = ${CMAKE_C_STANDARD}")
message(STATUS "CMAKE_C_STANDARD_REQUIRED = ${CMAKE_C_STANDARD_REQUIRED}")
message(STATUS "CMAKE_CXX_STANDARD_REQUIRED = ${CMAKE_CXX_STANDARD_REQUIRED}")
message(STATUS "CMAKE_C_VISIBILITY_PRESET = ${CMAKE_C_VISIBILITY_PRESET}")
message(STATUS "CMAKE_CXX_VISIBILITY_PRESET = ${CMAKE_CXX_VISIBILITY_PRESET}")
message(STATUS "CMAKE_VISIBILITY_INLINES_HIDDEN = ${CMAKE_VISIBILITY_INLINES_HIDDEN}")
message(STATUS "CMAKE_COMPILE_WARNING_AS_ERROR = ${CMAKE_COMPILE_WARNING_AS_ERROR}")
message(STATUS "_obs_clang_common_options = ${_obs_clang_common_options}")
message(STATUS "_obs_clang_c_options = ${_obs_clang_c_options}")
message(STATUS "_obs_clang_cxx_options = ${_obs_clang_cxx_options}")


include(defaults)

message(STATUS "-----------After defaults----------")
message(STATUS "OBS_SOURCE_DIR = ${OBS_SOURCE_DIR}")
message(STATUS "CMAKE_CURRENT_BINARY_DIR = ${CMAKE_CURRENT_BINARY_DIR}")
message(STATUS "OBS_OUTPUT_DIR = ${OBS_OUTPUT_DIR}")
message(STATUS "OBS_PLUGIN_DESTINATION = ${OBS_PLUGIN_DESTINATION}")
message(STATUS "OBS_DATA_DESTINATION = ${OBS_DATA_DESTINATION}")
message(STATUS "OBS_CMAKE_DESTINATION = ${OBS_CMAKE_DESTINATION}")
message(STATUS "OBS_SCRIPT_PLUGIN_DESTINATION = ${OBS_SCRIPT_PLUGIN_DESTINATION}")
message(STATUS "OBS_EXECUTABLE_DESTINATION = ${OBS_EXECUTABLE_DESTINATION}")
message(STATUS "OBS_LIBRARY_DESTINATION = ${OBS_LIBRARY_DESTINATION}")
message(STATUS "OBS_INCLUDE_DESTINATION = ${OBS_INCLUDE_DESTINATION}")
message(STATUS "CMAKE_INSTALL_LIBDIR = ${CMAKE_INSTALL_LIBDIR}")
message(STATUS "OBS_PLUGIN_PATH = ${OBS_PLUGIN_PATH}")
message(STATUS "OBS_SCRIPT_PLUGIN_PATH = ${OBS_SCRIPT_PLUGIN_PATH}")
message(STATUS "OBS_DATA_PATH = ${OBS_DATA_PATH}")
message(STATUS "CMAKE_FIND_PACKAGE_TARGETS_GLOBAL = ${CMAKE_FIND_PACKAGE_TARGETS_GLOBAL}")

message(STATUS "CMAKE_COMMAND = ${CMAKE_COMMAND}")
message(STATUS "CMAKE_GENERATOR = ${CMAKE_GENERATOR}")
message(STATUS "CMAKE_SYSTEM_VERSION = ${CMAKE_SYSTEM_VERSION}")
message(STATUS "CMAKE_GENERATOR_PLATFORM = ${CMAKE_GENERATOR_PLATFORM}")
message(STATUS "arch = ${arch}")
message(STATUS "dependencies_list = ${dependencies_list}")
message(STATUS "prebuilt = ${prebuilt}")
message(STATUS "qt6 = ${qt6}")
message(STATUS "cef = ${cef}")
message(STATUS "platform = ${platform}")

message(STATUS "CPACK_RESOURCE_FILE_LICENSE = ${CPACK_RESOURCE_FILE_LICENSE}")
message(STATUS "CPACK_PACKAGE_VERSION = ${CPACK_PACKAGE_VERSION}")
message(STATUS "CPACK_PACKAGE_FILE_NAME = ${CPACK_PACKAGE_FILE_NAME}")
message(STATUS "CPACK_INCLUDE_TOPLEVEL_DIRECTORY = ${CPACK_INCLUDE_TOPLEVEL_DIRECTORY}")
message(STATUS "CPACK_GENERATOR = ${CPACK_GENERATOR}")
message(STATUS "CPACK_THREADS = ${CPACK_THREADS}")

message(STATUS "studio = ${studio}")
message(STATUS "CPACK_PACKAGE_NAME = ${CPACK_PACKAGE_NAME}")
message(STATUS "OBS_WEBSITE = ${OBS_WEBSITE}")
message(STATUS "CPACK_PACKAGE_VENDOR = ${CPACK_PACKAGE_VENDOR}")
message(STATUS "OBS_WEBSITE = ${OBS_WEBSITE}")
message(STATUS "CPACK_PACKAGE_HOMEPAGE_URL = ${CPACK_PACKAGE_HOMEPAGE_URL}")
message(STATUS "OBS_COMMENTS = ${OBS_COMMENTS}")
message(STATUS "CPACK_PACKAGE_DESCRIPTION_SUMMARY = ${CPACK_PACKAGE_DESCRIPTION_SUMMARY}")
message(STATUS "SHA256 = ${SHA256}")
message(STATUS "CPACK_PACKAGE_CHECKSUM = ${CPACK_PACKAGE_CHECKSUM}")

include(helpers)


add_subdirectory(libobs)



message_configuration()
